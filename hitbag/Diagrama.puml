@startuml Hitbag

class Usuario {
  bags : List<Bag>
  ejecutarSobre(Bag, Contenido) : void
}

Usuario --> "*" Bag
Bag --> "*" Contenido

class Bag {
  contenido : List<Contenido>
  ejecutarSobre(Contenido) : void
  reemplazarContenido(Contenido, Contenido) : void
  getContenidosMultimedia() : List<Contenido>
}

' Un bag puede incluir todo el contenido de otro Bag, referenciandolo
Bag ..|> Contenido
' Con esto completamos un patron Composite

interface Contenido {
  titulo : String
  getTitulo() : String
  setTitulo(titulo) : void
}

ContenidoMultimedia -up-|> Contenido

abstract class ContenidoMultimedia {
  descripcion : String
  url : String
  getTitulo() : String
  setTitulo(titulo) : void
}

class Imagen {
}

class Video {
}

class Cancion {
}

class Texto {
  titulo : String
  contenido : String
}


Imagen .up.|> ContenidoMultimedia
Video .up.|> ContenidoMultimedia
Texto .up.|> Contenido
Cancion .up.|> ContenidoMultimedia

Bag -left-> "*" Hit
Hit -down-> "*" AccionHit
' Hit es un conjunto de acciones, por lo tanto es una lista de Acciones Hit
' Entonces podemos usar el patron Command, de forma tal que una lista de acciones
' se pueda aplicar mapeando una lista con el metodo ejecutarSobre(bag)
interface AccionHit {
  ejecutarSobre(bag) : void
}

class CambiarNombre {
  viejoNombre : String
  nuevoNombre : String
  ejecutarSobre(bag) : void
}
class AgregarContenido {
  contenido : Contenido
  ejecutarSobre(bag) : void
}
class QuitarContenido {
  contenido : Contenido
  ejecutarSobre(bag) : void
}

CambiarNombre .up.|> AccionHit
AgregarContenido .up.|> AccionHit
QuitarContenido .up.|> AccionHit

@enduml